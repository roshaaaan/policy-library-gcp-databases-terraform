import "tfplan/v2" as tfplan

allSQLDatabaseResources = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.type is "google_sql_database_instance" and
		resource_changes.mode is "managed" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"])
}

deny_undefined_ip_configuration = rule {
	all filter allSQLDatabaseResources as _, resources {
		resources.change.after.database_version not contains "SQLSERVER"
	} as _, resources {
		all resources.change.after.settings as _, settings {
			keys(settings) contains "ip_configuration" and
				length(settings.ip_configuration else []) != 0
		}
	}
}

ip_configuration_require_ssl_is_true = rule when deny_undefined_ip_configuration is true {
	all filter allSQLDatabaseResources as _, resources {
		resources.change.after.database_version not contains "SQLSERVER"
	} as _, instances {
		all instances.change.after.settings as _, setting {
			all setting.ip_configuration as _, config {
				(
				# Check if require_ssl exists and is true
				(config.require_ssl else null != null and config.require_ssl is true) or
					# Check if ssl_mode exists and is not `ALLOW_UNENCRYPTED_AND_ENCRYPTED`
					((config.ssl_mode else null != null) and
						config.ssl_mode != "ALLOW_UNENCRYPTED_AND_ENCRYPTED"))
			}
		}
	}
}

// -------------------------------------------------------------
// Category:    Database
// Provider:    hashicorp/google
// Resource:    google_sql_database_instance
// Check:       settings.ip_configuration.require_ssl is true or settings.ip_configuration.ssl_mode is not "ALLOW_UNENCRYPTED_AND_ENCRYPTED"
// -------------------------------------------------------------
// Ensure that Cloud SQL database instance requires all incoming
// connections to use SSL.
// -------------------------------------------------------------
main = rule {
	deny_undefined_ip_configuration and
	ip_configuration_require_ssl_is_true
}
